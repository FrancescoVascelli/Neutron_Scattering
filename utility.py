# -*- coding: utf-8 -*-
"""
Created on Thu Jul 14 13:57:42 2022

@author: Francesco Vascelli
"""
import math
import os
import numpy as np
import matplotlib.pyplot as mplt
import plotext as tplt
import init


def graph_plot(n_back: list, n_lost: list, n_through: list, x_depth: list, output_graph_path: str, print_graph_console: bool):
    """
    This method plots the ratio of neutrons by destination
    as a function of the depth of the reactor wall.
    """
    if print_graph_console:

        tplt.scatter(x_depth, n_back, label='back', color='blue')
        tplt.scatter(x_depth, n_lost, label='lost', color='orange')
        tplt.scatter(x_depth, n_through, label='through', color='green')

        tplt.xlabel("Depth (arbitrary units)")
        tplt.ylabel("Probability of final state")

        tplt.yticks(np.arange(0.0, 1.0, 0.1))
        tplt.ylim(left=-0.05, right=1)
        tplt.show()

    else:
        figure = mplt.figure(figsize=(10, 10))

        mplt.scatter(x_depth, n_back)
        mplt.scatter(x_depth, n_lost)
        mplt.scatter(x_depth, n_through)

        mplt.xlabel("Depth (arbitrary units)", fontsize=25)
        mplt.ylabel("Probability of final state", fontsize=25)
        mplt.xticks(fontsize=20)
        mplt.yticks(np.arange(0.0, 1.0, 0.1), fontsize=20)
        mplt.ylim(-0.05, 1)
        mplt.legend(['back', 'lost', 'through'],
                    loc="upper right", fontsize=20)

        output_graph_path_folder = output_graph_path.split('/')
        output_graph_path_folder = output_graph_path_folder[:-1]
        output_graph_path_folder = '/'.join(output_graph_path_folder)

        os.makedirs(output_graph_path_folder, exist_ok=True)

        figure.savefig(output_graph_path)
        init.console_print(
            message=f"üìà Graph Generated in {output_graph_path} !")


def save_data(data_path: str, n_back: list, n_lost: list, n_through: list, x_depth: list):
    """
    This method save the data generated by the program in specific
    path
    """
    os.makedirs(data_path, exist_ok=True)
    np.save(f'{data_path}/n_back.npy', n_back)
    np.save(f'{data_path}/n_lost.npy', n_lost)
    np.save(f'{data_path}/n_through.npy', n_through)
    np.save(f'{data_path}/x_depth.npy', x_depth)
    init.console_print(message=f"üíæ Data Saved in {data_path} !")


def graph_only(data_path: str, output_graph_path: str, print_graph_console: bool):
    """
    This method create only a graph with data provided in `data_path` param
    """
    n_back = np.load(f'{data_path}/n_back.npy')
    n_lost = np.load(f'{data_path}/n_lost.npy')
    n_through = np.load(f'{data_path}/n_through.npy')
    x_depth = np.load(f'{data_path}/x_depth.npy')
    init.console_print(message=f"üìÅ Data Loaded from {data_path} !")
    graph_plot(n_back=n_back, n_lost=n_lost, n_through=n_through,
               x_depth=x_depth, output_graph_path=output_graph_path, print_graph_console=print_graph_console)


def execution_time_message(message: str, time_start: float, time_end: float, msg_type: str = init.messageType.MESSAGE_TYPE_NORMAL):
    """
    This method print a execution time message pre-formatted
    """
    format_time: float = time_end-time_start
    format_time = math.trunc(format_time*100)/100
    msg_time: str = init.console_print(
        message=f"üïí  {message}: {format_time} seconds", msg_type=msg_type)
    return msg_time


def execute_debug(func, *args):
    """
    This method take as input a function name and `*args`
    and execute them only if `debug mode` is active
    """
    if init.params.debug:
        func(*args)
